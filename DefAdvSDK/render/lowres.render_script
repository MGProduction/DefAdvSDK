-- globals

screen_width = tonumber(sys.get_config("display.width"))
screen_height = tonumber(sys.get_config("display.height"))
screen_w = screen_width
screen_h = screen_height

wanted_Y=200
wanted_X=nil

function render_update_size(self,wanted_X,wanted_Y)
	local current_width = render.get_window_width()
	local current_height = render.get_window_height()

	screen_width=current_width
	screen_height=current_height
	if wanted_Y == nil then
		if wanted_X == nil then
			screen_w = screen_width
			screen_h = screen_height		
		else
			screen_w = wanted_X
			screen_h = math.floor(screen_height*(screen_w/screen_width))	
		end
	else
		screen_h = wanted_Y
		screen_w = math.floor(screen_width*(screen_h/screen_height))	
	end
		
end

function init(self)

	if sys.get_sys_info().system_name == "iPhone OS" then
		local current_width = render.get_window_width()
		local current_height = render.get_window_height()
		if current_width==1125 and current_height==2436 then
			wanted_Y=wanted_Y+32		
		end
	end

	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.view = vmath.matrix4()

	render_update_size(self,wanted_X,wanted_Y)
end

function update(self)
	render.set_depth_mask(true)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	render_update_size(self,wanted_X,wanted_Y)
	
	render.set_viewport(0, 0, screen_width, screen_height)
	render.set_view(self.view)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.set_projection(vmath.matrix4_orthographic(0, screen_w, 0, screen_h, -1, 1))

	render.draw(self.tile_pred)
	render.draw(self.particle_pred)
	render.draw_debug3d()

	render.set_viewport(0, 0, screen_width, screen_height)
	render.set_view(vmath.matrix4()) -- commentando questa riga si fa in modo che la gui segua il resto
	render.set_projection(vmath.matrix4_orthographic(0, screen_w, 0, screen_h, -1, 1))
	

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)

	render.set_depth_mask(false)
	render.draw_debug2d()
end

function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("update_wantedY") then	
		if wanted_Y==message.wanted_Y then
		else
			wanted_X=nil
			wanted_Y=tonumber(message.wanted_Y)
			render_update_size(self,wanted_X,wanted_Y)
		end
	elseif message_id == hash("set_view_projection") then
		self.view = message.view
		self.projection = message.projection
	end
end
