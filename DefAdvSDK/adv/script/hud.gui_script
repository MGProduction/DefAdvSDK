local hlp = require "adv/lua/minimalgui"
local config = require "adv/lua/config"
local adv = require "adv/lua/adventure"

local cursor={}
local hud={}
local pscreen_w=screen_w
local pscreen_h=screen_h

local actions={}
local inventory={}
local textarray={}

function split(s, delimiter)
	result = {};
	for match in (s..delimiter):gmatch("(.-)"..delimiter) do
		table.insert(result, match);
	end
	return result;
end

function addtextelement(self,text,name,pos,btndad,collection)
	local font="pixelfont"
	local metrics=gui.get_text_metrics(font,text)
	local nbtn=gui.new_text_node(pos,text)
	gui.set_id(nbtn, name)	
	gui.set_pivot(nbtn,gui.PIVOT_W)
	gui.set_layer(nbtn,"front")

	local item= {label=name,btn=nbtn,cmd=name,dad=btndad,pressed=false,reqpressed=false,scale=1.0,alpha=0.0}				
	table.insert(self.abtns, item)	

	if collection then
		table.insert(collection, nbtn)	
	end
end

function addicon(self,img,name,pos,btndad,collection)
	local atlas="hud"
	local size=vmath.vector3(24,24,0)
	local nbtn=gui.new_box_node(pos, size)
	local color=vmath.vector4(1,1,1,0)
	gui.set_size_mode(nbtn,gui.SIZE_MODE_AUTO)
	gui.set_texture(nbtn,atlas)
	gui.play_flipbook(nbtn,img)									
	gui.set_id(nbtn, name)	
	gui.set_color(nbtn, color)	
	gui.set_layer(nbtn,"front")
	 
	local item= {label=name,btn=nbtn,cmd=name,dad=btndad,pressed=false,reqpressed=false,scale=1.0,alpha=0.0}				
	table.insert(self.abtns, item)	

	if collection then
		table.insert(collection, nbtn)	
	end
end

function getpos(self,i,hm,anchor)
	local pos
	if anchor=="topleft" then
		pos=vmath.vector3(24*(i-1)+12,screen_h-12,0.1)
	elseif anchor=="bottomleft" then
		pos=vmath.vector3(24*(i-1)+12,12,0.1)
	elseif anchor=="topright" then
		pos=vmath.vector3( screen_w-12-24*(hm-i),screen_h-12,0.1)
	elseif anchor=="bottomright" then
		pos=vmath.vector3(screen_w-12-24*(hm-i),12,0.1)
	end
	return pos
end

function init_gui(self,btndad)

	local verbs=split(adv.verbs.list,",")
	local icons=split(adv.verbs.icons,",")
	for i, v in ipairs(verbs) do
		local pos=getpos(self,i,#verbs, adv.verbs.anchor)
		addicon(self,icons[i],v,pos,btndad,actions)
	end
	
	for i = 1, adv.inventory.size do
		local pos=getpos(self,i,adv.inventory.size,adv.inventory.anchor)		
		addicon(self,adv.inventory.blankicon or "icon5","inv."..i,pos,btndad,inventory)
		addicon(self,"cnt0","inv.cnt."..i,pos,nil,inventory)
	end

	--local pos=vmath.vector3(6,screen_h-12-24,0.1)
	--addtextelement(self,"What's your name?","dlg.1",pos,btndad,actions)
	--pos=vmath.vector3(6,screen_h-12-24-16*1,0.1)
	--addtextelement(self,"Why are you here?","dlg.2",pos,btndad,actions)
	--pos=vmath.vector3(6,screen_h-12-24-16*2,0.1)
	--addtextelement(self,"Nevermind","dlg.3",pos,btndad,actions)
	
	local pos=vmath.vector3(screen_w-12,screen_h-12,0.1)
	--addicon(self,"icon4","pause",pos,btndad,actions)

	pscreen_w=screen_w
	pscreen_h=screen_h
end

function init(self)
	gui_init(self)

	cursor.status=0
	cursor.visibile=1
	cursor.obj=gui.get_node("cursor")
	cursor.actionprefix=nil
	cursor.width=0
	cursor.position=vmath.vector3()

	hud.enabled=true
	
	local l=gui.get_node("selected")
	gui.set_text(l, "")
	gui.set_position(l, vmath.vector3(screen_w/2,16,0))
	
	l=gui.get_node("talkarea")
	gui.set_text(l, "")
	gui.set_position(l, vmath.vector3(screen_w/2,screen_h-8,0))
	
end

function actionicon_enable(self,enable)
	local color
	if enable==false then
		color=vmath.vector4(1,1,1,0)
	else
		color=vmath.vector4(1,1,1,1)
	end
	for i, l in ipairs(actions) do		
		gui.animate(l, gui.PROP_COLOR, color, gui.EASING_INOUTQUAD, 0.1, 0.0)	
	end
end

function inventoryicon_enable(self,enable)
	local color
	if enable==false then
		color=vmath.vector4(1,1,1,0)
	else
		color=vmath.vector4(1,1,1,1)
	end
	for i, l in ipairs(inventory) do		
		gui.animate(l, gui.PROP_COLOR, color, gui.EASING_INOUTQUAD, 0.1, 0.0)	
	end
end

function hudicon_enable(self,enable)
	if enable==false then
		color=vmath.vector4(1,1,1,0)
	else
		color=vmath.vector4(1,1,1,1)
	end

	--l=gui.get_node("pause")		
	--gui.set_color(l, color)
end

function cursor_enable(self,enable)
	if enable==false then
		color=vmath.vector4(1,1,1,0)
	else
		color=vmath.vector4(1,1,1,1)
	end

	l=gui.get_node("cursor")		
	gui.set_color(l, color)
	l=gui.get_node("selected")		
	gui.set_color(l, color)
end

function hud_enable(self,enable)
	local enablebool=enable>0
	local enablebool2=enable>1
	hud.enabled=enablebool
	actionicon_enable(self,enablebool2)
	inventoryicon_enable(self,enablebool2)
	hudicon_enable(self,enablebool2)
	cursor_enable(self,enablebool)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	gui_update(self,dt)
	if screen_w==pscreen_w and screen_h==pscreen_h then
	else
		local verbs=split(adv.verbs.list,",")
		for i, v in ipairs(verbs) do
			local pos=getpos(self,i,#verbs, adv.verbs.anchor)
			local l=gui.get_node(v)	
			gui.set_position(l,pos)		
		end

		for i = 1, adv.inventory.size do
			local pos=getpos(self,i,adv.inventory.size,adv.inventory.anchor)		
			local l=gui.get_node("inv."..i)	
			gui.set_position(l,pos)		
			l=gui.get_node("inv.cnt."..i)	
			gui.set_position(l,pos)		
		end		

		local l=gui.get_node("selected")
		gui.set_position(l, vmath.vector3(screen_w/2,16,0))

		l=gui.get_node("talkarea")
		gui.set_position(l, vmath.vector3(screen_w/2,screen_h-8,0))		

		pscreen_w=screen_w
		pscreen_h=screen_h
	end
end

function on_message(self, message_id, message, sender)
	if message_id==hash("hud_create") then
		init_gui(self,message.dad)
	elseif message_id==hash("cursor_setobj") then
		local seltext=gui.get_node("selected")
		if message.force~=true and cursor.status==message.status and (cursor.withmessage==message.desc or message.desc==nil) then
		else
			cursor.status=message.status	
			cursor.withmessage=message.desc	or ""			
			if cursor.status<=0 then
				local action=cursor.actionprefix or ""
				gui.play_flipbook(cursor.obj,"cursor-cross")			
				gui.set_text(seltext, action.." the "..cursor.message.." "..cursor.actionprepprefix)	
				metrics=gui.get_text_metrics_from_node(seltext)
				cursor.width=metrics["width"]
			else
				local action
				if cursor.status<=1 then
					if adv.player then
						action=cursor.actionprefix or "walk to"
						if cursor.message=="" then
						else
							action=action.." the"
						end
					else
						action=cursor.actionprefix or ""
					end					
				else
					action=cursor.actionprefix or "look at"
					if cursor.message=="" then
					else
						action=action.." the"
					end
				end
				local out=action.." "..cursor.message
				if cursor.actionprepprefix then
					out=out.." "..cursor.actionprepprefix
					if cursor.withmessage==nil or cursor.withmessage=="" then
					else
						out=out.." the "..cursor.withmessage
					end
				end
				gui.play_flipbook(cursor.obj,"cursor-active")				
				gui.set_text(seltext, out)	
				metrics=gui.get_text_metrics_from_node(seltext)
				cursor.width=metrics["width"]
			end	
		end
		cursor.position.x=message.position.x
		cursor.position.y=message.position.y
		gui.set_position(cursor.obj, message.position)
		if message.position.y+24<screen_h then
			message.position.y=message.position.y+12
		else
			message.position.y=message.position.y-12
		end
		if message.position.x-cursor.width/2<0 then
			message.position.x=cursor.width/2
		elseif message.position.x+cursor.width/2>screen_w then
			message.position.x=screen_w-cursor.width/2
		end
		gui.set_position(seltext, message.position)	
	elseif message_id==hash("cursor_set") then
		local seltext=gui.get_node("selected")
		if message.force~=true and cursor.status==message.status and (cursor.message==message.desc or message.desc==nil) then
		else
			cursor.status=message.status	
			cursor.message=message.desc	or ""			
			if cursor.status<=0 then
				local action=cursor.actionprefix or ""
				gui.play_flipbook(cursor.obj,"cursor-cross")			
				gui.set_text(seltext, action.."")	
				metrics=gui.get_text_metrics_from_node(seltext)
				cursor.width=metrics["width"]
			else
				local action
				if cursor.status<=1 then
					if adv.player then
						action=cursor.actionprefix or "walk to"
						if cursor.message=="" then
						else
							action=action.." the"
						end
					else
						action=cursor.actionprefix or ""
					end					
				else
					action=cursor.actionprefix or "look at"
					if cursor.message=="" then
					else
						action=action.." the"
					end
				end
				local out=action.." "..cursor.message
				if cursor.actionprepprefix then
					out=out.." "..cursor.actionprepprefix
					if cursor.withmessage==nil or cursor.withmessage=="" then
					else
						out=out.." the"..cursor.withmessage
					end
				end
				gui.play_flipbook(cursor.obj,"cursor-active")				
				gui.set_text(seltext, out)	
				metrics=gui.get_text_metrics_from_node(seltext)
				cursor.width=metrics["width"]
			end	
		end
		if message.position then
			cursor.position.x=message.position.x
			cursor.position.y=message.position.y
			gui.set_position(cursor.obj, message.position)
			if message.position.y+24<screen_h then
				message.position.y=message.position.y+12
			else
				message.position.y=message.position.y-12
			end
			if message.position.x-cursor.width/2<0 then
				message.position.x=cursor.width/2
			elseif message.position.x+cursor.width/2>screen_w then
				message.position.x=screen_w-cursor.width/2
			end
			gui.set_position(seltext, message.position)	
		end
	elseif message_id==hash("action.examine") then				
		if message.desc=="" then
			gui.set_text(gui.get_node("talkarea"), "")			
		else
			local desc=string.gsub (message.desc or "I don't see anything special about that","ยง","\n")
			gui.set_text(gui.get_node("talkarea"), desc )			
			gui.set_text(gui.get_node("selected"), "")
			hud_enable(self, 0)
		end
	elseif message_id==hash("settextcolor") then
		local l=gui.get_node("talkarea")
		local color=gui.get_color(l)
		if message.color=="white" then
			color.x=1
			color.y=1
			color.z=1
		elseif message.color=="blue" then
			color.x=0
			color.y=153/255
			color.z=1
		elseif message.color=="green" then
			color.x=0
			color.y=153/255
			color.z=0
		elseif message.color=="red" then
			color.x=1
			color.y=0
			color.z=0
		elseif message.color=="yellow" then
			color.x=1
			color.y=1
			color.z=0
		end
		gui.set_color(l, color)	
	elseif message_id==hash("setactionprepprefix") then
		if cursor.actionprepprefix==message.prefix then
		else
			cursor.actionprepprefix=message.prefix
			msg.post(".","cursor_setobj",{position=cursor.position,force=1,status=cursor.status})
		end	
	elseif message_id==hash("setactionprefix") then
		if cursor.actionprefix==message.prefix then
		else
			cursor.actionprefix=message.prefix
			cursor.actionprepprefix=nil
			msg.post(".","cursor_set",{position=cursor.position,status=-1,desc=cursor.message})
		end
	elseif message_id==hash("updateval") then
		local l=gui.get_node("inv.cnt."..message.id)
		gui.play_flipbook(l,"cnt"..message.cnt)			
	elseif message_id==hash("settextarray")	then
		
	elseif message_id==hash("hud_enable") then			
		hud_enable(self,message.enable)
	elseif message_id==hash("hud_setinv") then
		local l=gui.get_node("inv."..message.num)		
		if message.img then
			gui.play_flipbook(l,message.img)
		end
		if message.val then
			local l=gui.get_node("inv.cnt."..message.num)		
			if l==nil then
				local pos=vmath.vector3(24*(i-1)+12,screen_h-12,0.1)
				addicon(self,"cnt"..message.val,"inv.cnt."..message.num,pos,nil,inventory)
			else
				gui.play_flipbook(l,"cnt"..message.val)		
			end
		end
	else
		gui_on_message(self,message_id,message,sender)
	end
end
